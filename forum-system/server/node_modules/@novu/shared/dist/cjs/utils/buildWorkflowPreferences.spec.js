"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const buildWorkflowPreferences_1 = require("./buildWorkflowPreferences");
const WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_VALUE = true;
const WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY = false;
const DEFAULT_CHANNEL_PREFERENCE = {
    enabled: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_VALUE,
    readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
};
const testDefaultPreferences = {
    workflow: DEFAULT_CHANNEL_PREFERENCE,
    channels: {
        in_app: DEFAULT_CHANNEL_PREFERENCE,
        sms: DEFAULT_CHANNEL_PREFERENCE,
        email: DEFAULT_CHANNEL_PREFERENCE,
        push: DEFAULT_CHANNEL_PREFERENCE,
        chat: DEFAULT_CHANNEL_PREFERENCE,
    },
};
(0, vitest_1.describe)('buildWorkflowPreferences', () => {
    (0, vitest_1.it)('should return the defaults if input is undefined', () => {
        const result = (0, buildWorkflowPreferences_1.buildWorkflowPreferences)(undefined, testDefaultPreferences);
        (0, vitest_1.expect)(result).toEqual(testDefaultPreferences);
    });
    (0, vitest_1.it)('should return the input object if a complete preferences object is supplied', () => {
        const testPreference = {
            enabled: false,
            readOnly: true,
        };
        const testPreferences = {
            workflow: testPreference,
            channels: {
                in_app: testPreference,
                sms: testPreference,
                email: testPreference,
                push: testPreference,
                chat: testPreference,
            },
        };
        const result = (0, buildWorkflowPreferences_1.buildWorkflowPreferences)(testPreferences, testDefaultPreferences);
        (0, vitest_1.expect)(result).toEqual(testPreferences);
    });
    (0, vitest_1.describe)('should populate the remainder of the object with default values', () => {
        (0, vitest_1.it)('using just a single, partial channel with readOnly', () => {
            const testPreferences = {
                channels: { in_app: { readOnly: true } },
            };
            const result = (0, buildWorkflowPreferences_1.buildWorkflowPreferences)(testPreferences, testDefaultPreferences);
            (0, vitest_1.expect)(result).toEqual(Object.assign(Object.assign({}, testDefaultPreferences), { channels: Object.assign(Object.assign({}, testDefaultPreferences.channels), { in_app: { enabled: true, readOnly: true } }) }));
        });
        (0, vitest_1.it)('using just a full, single channel', () => {
            const testPreferences = {
                channels: { in_app: { enabled: false, readOnly: false } },
            };
            const result = (0, buildWorkflowPreferences_1.buildWorkflowPreferences)(testPreferences, testDefaultPreferences);
            (0, vitest_1.expect)(result).toEqual(Object.assign(Object.assign({}, testDefaultPreferences), { channels: Object.assign(Object.assign({}, testDefaultPreferences.channels), { in_app: { enabled: false, readOnly: false } }) }));
        });
        (0, vitest_1.it)('using a combination of channels and workflow-level preferences', () => {
            var _a, _b, _c, _d, _e, _f, _g;
            const testPreferences = {
                workflow: { enabled: true, readOnly: true },
                channels: {
                    in_app: { enabled: false, readOnly: false },
                    chat: { enabled: false },
                },
            };
            const result = (0, buildWorkflowPreferences_1.buildWorkflowPreferences)(testPreferences, testDefaultPreferences);
            (0, vitest_1.expect)(result).toEqual({
                workflow: testPreferences.workflow,
                channels: {
                    in_app: {
                        enabled: false,
                        readOnly: false,
                    },
                    chat: {
                        enabled: false,
                        readOnly: (_a = testPreferences.workflow) === null || _a === void 0 ? void 0 : _a.readOnly,
                    },
                    sms: {
                        enabled: (_b = testPreferences.workflow) === null || _b === void 0 ? void 0 : _b.enabled,
                        readOnly: (_c = testPreferences.workflow) === null || _c === void 0 ? void 0 : _c.readOnly,
                    },
                    email: {
                        enabled: (_d = testPreferences.workflow) === null || _d === void 0 ? void 0 : _d.enabled,
                        readOnly: (_e = testPreferences.workflow) === null || _e === void 0 ? void 0 : _e.readOnly,
                    },
                    push: {
                        enabled: (_f = testPreferences.workflow) === null || _f === void 0 ? void 0 : _f.enabled,
                        readOnly: (_g = testPreferences.workflow) === null || _g === void 0 ? void 0 : _g.readOnly,
                    },
                },
            });
        });
    });
    (0, vitest_1.it)('should use the `workflow`-level preferences to define defaults for all channel-level preferences', () => {
        const expectedDefaultValue = false;
        const testPreferences = {
            workflow: { enabled: expectedDefaultValue },
        };
        const result = (0, buildWorkflowPreferences_1.buildWorkflowPreferences)(testPreferences, testDefaultPreferences);
        const expectedResult = {
            workflow: {
                enabled: expectedDefaultValue,
                readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
            },
            channels: {
                in_app: {
                    enabled: expectedDefaultValue,
                    readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
                },
                sms: {
                    enabled: expectedDefaultValue,
                    readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
                },
                email: {
                    enabled: expectedDefaultValue,
                    readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
                },
                push: {
                    enabled: expectedDefaultValue,
                    readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
                },
                chat: {
                    enabled: expectedDefaultValue,
                    readOnly: WORKFLOW_CHANNEL_PREFERENCE_DEFAULT_READ_ONLY,
                },
            },
        };
        (0, vitest_1.expect)(result).toEqual(expectedResult);
    });
});
